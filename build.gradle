import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

buildscript {
    ext.kotlin_version = '1.6.10'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id "com.github.davidmc24.gradle.plugin.avro-base" version "1.0.0"
}

apply plugin: 'kotlin-kapt'

group 'com.fretron.vehicleManager'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    kotlin_version = "1.6.10"
    jerseyVersion = "2.32"
    daggerVersion = '2.40.5'
}

repositories {
    mavenCentral()
}

dependencies {

    //  ######################### All Development Dependencies #########################

    // Kotlin stdlib

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Jersey
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-server', version: jerseyVersion

    // Jersey Grizzly Server
    implementation group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion
    // https://mvnrepository.com/artifact/org.glassfish.jersey.inject/jersey-hk2
    implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion

    // Apache Avro
    implementation group: 'org.apache.avro', name: 'avro', version: '1.10.0'

    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    implementation group: 'com.sun.jersey', name: 'jersey-json', version: '1.19.4'

    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20190722'
    implementation 'com.google.code.gson:gson:2.9.0'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-json-jackson
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-avro:2.13.1'

    // https://mvnrepository.com/artifact/com.google.dagger/dagger
    implementation group: 'com.google.dagger', name: 'dagger', version: daggerVersion
    implementation 'com.google.dagger:dagger-compiler:2.40.5'

    // https://mvnrepository.com/artifact/org.mongodb/mongodb-driver
    implementation group: 'org.mongodb', name: 'mongodb-driver', version: '3.12.7'

    //  kapt
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // MongoDB
    implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.7'

    //  ######################### All Test Dependencies #########################

    // Junit 4
    implementation 'junit:junit:4.13.2'

    // Mockito - Kotlin
    testImplementation group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.6.0'
    testImplementation 'org.mockito:mockito-inline:4.3.1'

    // Jersey Test
    testImplementation group: 'org.glassfish.jersey.test-framework', name: 'jersey-test-framework-core', version: jerseyVersion
    testImplementation group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-grizzly2', version: jerseyVersion

    //  kapt Test
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

    // EmbeddedMongoDB
    testImplementation group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "2.0.3"

    // Logging
    implementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'

    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.1')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.13.1')
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Common',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'integrationTests.CommonRunner'
    }
    archivesBaseName = project.name + '-all'
    from sourceSets.test.output
    //collect all dependencies
    from { configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
}

task renewAvro {
    doLast {
        delete "src/main/java/com.fretron.vehicleManager/model"
        copy {
            from "build/avro/com.fretron.vehicleManager/model"
            into "src/main/java/com.fretron.vehicleManager/model"
        }
    }
}

task generateAvro(type: GenerateAvroJavaTask) {
    source("src/main/avro")
    include("**/**/*.avsc")
    outputDir = file("src/main/java")
}

renewAvro.dependsOn generateAvro
build.dependsOn renewAvro

avro {
    fieldVisibility = "PRIVATE"
}

kapt.includeCompileClasspath = false

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}